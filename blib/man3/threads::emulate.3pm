.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "threads::emulate 3pm"
.TH threads::emulate 3pm "2009-02-10" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
threads::emulate \- Create and use emulated threads (and share vars easyer)
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This module was made because I don't like to have to \*(L"declare\*(R"
every \*(L"sub\-level\*(R" of a shared var using \f(CW\*(C`threads::shared\*(C'\fR.
This is \s-1NOT\s0 real threads. We use \s-1UNIX\s0 sockets to emulate shared
variables.
.PP
.Vb 1
\&    use threads::emulate;
.Ve
.PP
.Vb 1
\&    my $shared_var : Shared;
.Ve
.PP
.Vb 3
\&    $shared_var = [1..5];                      # Congratulations! Now you have a shared array_ref!
\&    $shared_var\->[5] = {jan => 1, feb => 2};   # Now inside of the array_ref there\(aqs a hash_ref!
\&    $shared_var\->[5]\->{obj} = Any::Class\->new; # End now there\(aqs a object!
.Ve
.PP
.Vb 1
\&    lock \e$shared_var;                         # Yes... You have to use ref...
.Ve
.PP
.Vb 4
\&    async{
\&        lock \e$shared_var;
\&        $shared_var\->[0] .= "K";
\&    };
.Ve
.PP
.Vb 2
\&    $shared_var\->[0] = "O";
\&    unlock \e$shared_var;
.Ve
.PP
.Vb 1
\&    sleep 1;
.Ve
.PP
.Vb 1
\&    print $shared_var\->[0], $/;                # prints "OK" (I hope... :) )
.Ve
.SH "EXPORT"
.IX Header "EXPORT"
This module exports 3 functions: async, lock and unlock.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
#=head2 _create
#
#Internal use.
#
=cut
.PP
sub _create {
    my \f(CW$self\fR = shift;
    my \f(CW%par\fR  = \f(CW@_\fR;
    our \f(CW$sockpath\fR = \*(L"/tmp/\*(R" . _\|_PACKAGE_\|_ . \*(L".sock\*(R";
    unlink \f(CW$sockpath\fR;
    unless ( exists \f(CW$par\fR{noFork} and \f(CW$par\fR{noFork} ) {
        \f(CW$pid\fR = \fIfork()\fR;
        \fI_master()\fR unless \f(CW$pid\fR;
    }
}
.PP
#=head2 get_obj
#
#Internal use.
#
#=cut
.PP
sub get_obj {
    our \f(CW$obj\fR;
}
.Sh "async"
.IX Subsection "async"
This func is exported by default. It receives only one parameter, a sub_ref.
It returns a thread::emulate::async object.
.Sh "lock"
.IX Subsection "lock"
This func is exported by default. It receives only one parameter, a reference for a shared var.
.Sh "unlock"
.IX Subsection "unlock"
This func is exported by default. It receives only one parameter, a reference for a shared var.
.SH "AUTHOR"
.IX Header "AUTHOR"
Fernando Correa de Oliveira, \f(CW\*(C`<fco at cpan.org>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to \f(CW\*(C`bug\-threads\-emulate at rt.cpan.org\*(C'\fR, or through
the web interface at <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=threads\-emulate>.  I will be notified, and then you'll
automatically be notified of progress on your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc threads::emulate
.Ve
.PP
You can also look for information at:
.IP "* \s-1RT:\s0 \s-1CPAN\s0's request tracker" 4
.IX Item "RT: CPAN's request tracker"
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=threads\-emulate>
.IP "* AnnoCPAN: Annotated \s-1CPAN\s0 documentation" 4
.IX Item "AnnoCPAN: Annotated CPAN documentation"
<http://annocpan.org/dist/threads\-emulate>
.IP "* \s-1CPAN\s0 Ratings" 4
.IX Item "CPAN Ratings"
<http://cpanratings.perl.org/d/threads\-emulate>
.IP "* Search \s-1CPAN\s0" 4
.IX Item "Search CPAN"
<http://search.cpan.org/dist/threads\-emulate/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2009 Fernando Correa de Oliveira, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
